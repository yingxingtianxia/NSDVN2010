Python2-day3-上
1、模块作业讲解
	- 备份案例
		- time模块判断时间
		- os模块获取备份目录和文件
		- tarfile模块进行备份打包操作
		- hashlib模块对文件进行变动校验
		
2、OOP基础
	- 基础概念
		- 类（Class) :用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。
		- 实例化：创建一个类的实例，类的具体对象。
		- 方法：类中定义的函数。
		- 对象：通过类定义的数据结构实例。对象包括两个数据成员 (类变量和实例变量) 和方法。
	- 说明
		- 类：指拥有相同属性和方法的对象的集合，例如：人，鸟，汽车等；
		- 实例化或对象：指类的具体对象，例如：张三【人】，猫头鹰【鸟】,奥迪【汽车】等；

	- 创建类
		- 使用 class 语句来创建一个新类，class 之后为类的名称并以冒号结尾
		- 类名建议使用驼峰形式
	- 创建实例
		- 类是蓝图，实例是根据蓝图创建出来的具体对象
	- 绑定方法
		- 构造方法 __init__(self)
			- 实例化类对象时默认调用的方法
			- 每个实例不同参数
		- 实例变量
			- 构造方法中定义的变量
			- 实例化对象时必须要给定的参数
			- 每个实例都调用自己的
		- 实例方法
			- 实际上就是个函数
			- 由实例调用
		- extras：
			- 类变量
				- 定义类的时候的公共变量
				- 每个实例都可以调用
				- 分类
					- 私有，变量__var，不可以直接访问
					- 共有，变量var，可以直接访问
			- 类方法
				- classmethod
				- 参数cls
				- 当方法中需要使用类对象时使用的方法
				- 一般配合类变量使用
			- 静态方法
				- staticmethod
				- 无任何参数
				- 类和实例都可以调用


3、组合和派生
	- 组合
		- 概念
			- 定义专门的类文件，然后进行import
			- 组合是让不同混合的类加入到其他类来增强代码的可用性
			- 可以在一个大点的类中创建其他类的实例，实现一些其属性和方法来增强原来的对象
			
	- 派生
		- 子类
			- 当类之间有显著的不同，并且较小的类是较大的类所需要的组件时组合表现得很好；
			- 但当设计 “相同的类但有一些不同的功能” 时，派生就是一个更加合理的选择了
			- OOP的更强大方面之一是能够使用一个已经定义好的类，扩展它或者对其进行修改，而不会影响系统中使用现存类的其它代码片段
			- OOD(面向对象设计) 允许类特征在子孙类或子类中进行继承
			- 创建子类只需要在圆括号中写明从哪个父类继承即可
			
		- 继承
		
		- 继承覆盖
		
		- 多重继承（MRO）
			https://www.cnblogs.com/lilinyuan5474/p/11684386.html
