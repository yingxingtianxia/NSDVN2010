DevOps-day04-上
1、git概述
	- 版本控制
		- 记录若干文件内容变化，以便将来特定版本的修订情况
		- 可以将文件回溯到之前的状态，甚至把整个项目回滚到某个节点
		- 可以记录某个文件在某个时间被某个人修改
	- 本地版本控制器
		- rcs   基本绝迹江湖
	- 集中化的版本控制系统
		- 允许不同的开发者协同工作
		- CVS、Subversion和Perforce等
		- 单一拥有集中管理的服务器，保存文件的所有修订版本
		- 协同工作的所有人通过客户端连接到这台服务器、取出来最新的进行更新或者提交
	- 分布式版本控制系统
		- 客户端不止提取最新版的文件快照同时把原始的代码仓库完整的镜像下来
		- 一旦服务器发生故障，任意客户端都可用本地仓库进行恢复
		- 每一次的提取操作都是对代码仓库的完整备份
	- Git
		- Linux的作者写的，总之很强就对了
		- 特点
			- 直接快照而非比较差异
			- 近乎所有的操作都在本地执行
			- 时刻保持数据的完整性
			- 提交到Git之前，所有数据都要进行内容的校验和计算
			- 并将此结果作为数据的唯一标准和索引
		- 状态
			- 已提交(committed)	：表示该文件已经被安全的保存到了本地数据库中了
			- 已修改(modified)	：表示该文件已经被修改，但还没有被提交保存
			- 已暂存(staged)	：表示把已修改的文件放在下次要提交时要保存的清单中
		- 三个区域
			- 工作区：工作目录，写代码的目录
			- 暂存区：改动过的文件放到这里，作为缓存地带，准备提交到版本库
			- 版本库：代码存储的位置
		- 全局配置
			- git config --global user.name 'xxx'
			- git config --global user.email 'xxx'
			- git config --global core.editor vim
			- git config --list
			- cat ~/.gitconfig
2、git基础应用
	- 创建仓库
		- 仓库不存在：git init destription_name
		- 仓库存在：cd destription_name;git init
		- 半路仓库：git clone://
	- 记录更新到仓库
		- 文件状态
			- 未跟踪：尚未被纳入版本管理的文件
			- 已跟踪：已经被纳入版本管理的文件
						上次快照中有他们的记录，一段时间后他们的状态是未更新、已修改或者放入暂存区
	- 查看状态
		- git status
	- 跟踪所有文件
		- git add .   .表示所有，也可以单独跟踪一个文件
	- 忽略文件
		- 项目工作区目录下创建一个.gitignore文件，将不需要提交到git的文件写入到这个文件
	- 提交更新
		- git commit 
			- 可以直接回车编辑文件
			- 也可以直接写更新说明
	- 删除文件
		- git rm
			- 连同工作区里边的文件一起删除
			- rm是只删除了本地文件，并没有将暂存区的文件删除
	- 移动文件
		- git mv oldfile  newfile
			- mv old  new
			- git rm old
			- git add new
	- 提交历史
		- git log 
	- 取消已暂存的文件
		- git reset HEAD filename
		- 希望将文件撤出暂存区，但是保留其修改的内容
	- 回滚
		- git checkout -- filename
			- 丢弃工作区的改动，即将版本库里边的旧版本拿出来覆盖本地已经修改的文件
			
3、git分支管理
	- 标签
		- 对某一时刻的版本进行标记
		- git tag   	查看标签
		- git tag -l 	查找特定的标签
		- 分类
			- 轻量标签：特定提交的引用
			- 附注标签：存储在git数据库中的一个完整对象
		- git tag -a 标签 -m "说明"		附录标签
		- git tag 标签					普通标签
		- git show 标签名				查看标签内容
		- git tag -d 标签				删除标签
	- 分支
		- 概念
			- 几乎所有版本控制系统都支持某种形式的分支
			- 把开发工作从主线上分离出来，以免影响主线开发
			- 跟多版本管理工具中是一个略微低效的过程
			- Git的分支特别轻量
			- 创建的时候在瞬间完成
			- 分之间切换也是随心所欲
		- 核心
			- 进行提交操作时，先计算每个子目录的校验和
			- 保存校验和为树对象
			- 创建一个提交对象，除了包含上述信息，还包含指向树对象的指针
			- 结果就是Git可以在需要的时候重现此次保存的快照
			
			- 本质是提交对象的可变指针
			- 默认分支名是master
			- 每次提交操作指针会自动向前移动
			- master分支并不是特殊的分支
		- git branch
			- 查看分支
		- git branch 分支名
			- 新建分支
		- git checkout 分支名
			- 切换分支
		- git merge 分支名
			- 合并分支
		- git branch -d 分支名
			- 删除分支
		
	