Devops-day1-上

1、多进程概述
	- forking
		- Linux操作系统广泛应用的手段
		- 当执行到某一个命令时，父进程fork出一个子进程
		- 子进程和父进程具有相同的环境，命令在子进程中运行
	- 进程生命周期
		- 父进程fork出子进程并挂起
		- 子进程完成命令，释放大部分资源并通知父进程，子进程变为僵尸进程
		- 父进程获悉子进程运行结束，释放所有资源，回收子进程
	- os.fork()
		- 父进程返回子进程的pid
		- 子进程返回的pid是0

2、多进程应用
	- 多进程编程思路
		- 父进程fork子进程
		- 子进程执行具体命令
		- 子进程结束后彻底退出
	- 僵尸进程
		- 没有任何工作、也不能被调度，等待回收
		- 存在过多导致系统无法分配新的进程号
		- 杀父进程或重启消除僵尸进程

3、多线程应用
	- 动机
		- 电脑程序的执行是由一个执行序列的组成，按既定顺序在CPU中依次执行
		- 序列中子任务如果相互无关，造成资源浪费
		- 并行执行可大幅度提高工作效率
	- 特点
		- 异步是本质、需要有多个事务并发
		- 事务的运行顺序是不确定的、随机的、不可预测的
		- 分流执行、每个流有自己的目标
		- 子任务计算中间结果，合并成最终的结果
	- 进程和线程
		- 最简单的解释
			- 进程：系统资源分配的最小单元		火车
			- 线程：CPU调度的最小单元			车厢
		- 进程
			- 程序是二进制文件
			- 进程是程序的一次执行
			- 每个进程有自己的地址空间、内存及记录运行轨迹的辅助数据
			- 操作系统给每个运行的进程公平分配时间
		- 线程
			- 轻量级进程
			- 所有的线程运行在同一个进程中，共享运行环境
			- 一个进程中的所有线程共享数据空间，便于线程间数据通信

		- 缺点
			- 由于GIL(Global Interperter Lock)的存在，多线程的效率受到很大程度的限制
			https://www.cnblogs.com/SuKiWX/p/8804974.html
- 总结：
    IO密集场景可以用多线程提高效率
    计算密集型场景可以用多进程提高效率

- 模块：
    - 进程：os.fork(),multiprocessing.Process()
    - 线程：threading.Thread()
