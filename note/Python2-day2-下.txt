Python2-day2-下
1、递归函数
	- 描述
		- 编程语言中, 函数Func(Type a,......)直接或间接调用函数本身，则该函数称为递归函数.         			
　　	- 在数学上，关于递归函数的定义如下: 对于某一函数f(x), 其定义域是集合A, 那么若对于A集合中的某一个值x0，
　　	- 其函数值f(x0)由f(f(x0))决定，那么就称f(x)为递归函数.
　　	- 递归的定义:一种计算过程, 如果其中每一步都要用到前一步或前几步的结果, 称为递归的.
　　
		- 用递归过程定义的函数, 称为递归函数, 例如连加,连乘及阶乘等. 凡是递归的函数, 是可计算的, 即能行的.
	- 特点
		- 递归函数的优点是定义简单, 逻辑清晰. 理论上, 所有的递归函数都可以写成循环的方式, 但循环的逻辑不如递归清晰.
		- 使用递归函数需要注意防止栈溢出. 
		- 在计算机中, 函数调用是通过栈(stack)这种数据结构实现的
		- 每当进入一个函数调用,栈就会加一层栈帧, 每当函数返回, 栈就会减少一层栈帧. 
		- 由于栈的大小不是无限的, 所以, 递归调用的次数过多, 会导致栈溢出. 当尝试调用fact(1000)时, 程序会报错.
	- 阶乘案例
		def fact(n):
			if n == 1:
				return 1
			return n * fact(n - 1)
			
	- 快排案例
	
2、生成器
	- 概念
		- 从语法讲，生成器是一个带yield语句的函数
		- 一个函数或者子程序只能返回一次，但生成器能暂停执行并返回一个中间结果
		- yield语句返回一个值给调用者并暂停执行
		- 用next()方法持续调用
		
		- 优势：节约内存空间，以对象的形式进行存储，可接受直接遍历，遍历时实例化出具体元素
		
	- 生成器演示
		- 原生生成器
			- def my_gen():
				yield 1
				yield 2
				yield 3
			  mg = mygen()
			  - next()调用
			  - for遍历
		- iter()函数
			- a = iter(range(10))
			  a.__next__()
		- 生成器表达式
			- nums1 = [randint(1,100) for i in range(5)]
			- nums2 = (randint(1,100) for i in range(5))
	- 生成器案例
			
		

3、模块详解
	- 概念
		- 从逻辑上组织Python代码的形式
		- 拆分大段代码成多个有组织的代码段，保证彼此交互
		- 代码段之间相互关联，可能是类，也可能是独立的操作函数
		- 内部的变量是模块的属性、内部的函数是模块的方法
		
	- 模块存放路径：类似于Linux的PATH路径
		- 当前目录下的文件
		- 系统预定义sys.path
		
	- tarfile模块
		- 通过对象来处理tar文件
			- tar = tarfile.open(tarname,mode)
		- 常用方法
			- 创建
				- add()		向tar包内增加文件
			- 解包
				- extract(filename) 	解压单个文件
				- extractall()			解压所有文件
				- getmembers()			获取tar包没所有文件名列表
			- 关闭
				- close()
				
	- hashlib模块
		- 通过对象
			- m = hashlib.md5()
		- 常用加密对象
			- md5()
			- sha256()
			- sha512()
		- 对象操作方法
			- digest_size	摘要位长
			- digest()		bytes类型消息摘要
			- hexdigest()	16进制消息摘要
			- update(bytes)		向对象添加消息
			
extras：
	- 闭包
		- 函数内部调用外部变量的行为
	- 装饰器
		- 函数内部调用外部函数